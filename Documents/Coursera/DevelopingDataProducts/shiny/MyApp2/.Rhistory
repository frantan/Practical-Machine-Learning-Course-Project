anova(mod0, mod1)
mod2<-lm(mpg~wt+factor(cyl)+factor(am), data=mtcars)
anova(mod0, mod1, mod2)
g<-ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl), size=factor(am)))
g+geom_point())
g+geom_point()
head(mtcars)
g<-ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl), size=disp))
g+geom_point()
g<-ggplot(mtcars, aes(x=wt, y=mpg, color=factor(am)))
g+geom_point()
few_cars<-mtcars[2.4<mtcars$wt<3.8,]
few_cars<-mtcars[mtcars$wt>2.4 & mtcars$wt<3.8,]
g<-ggplot(few_cars, aes(x=wt, y=mpg, color=factor(am)))
g+geom_point()
mod0<-lm(mpg~wt, data=few_cars)
mod1<-lm(mpg~wt+factor(am), data=few_cars)
anova(mod0, mod1)
summary(mod0)
summary(mod1)
q()
?mtcars
mod<-lm(mpg~factor(am), data=mtcars)
mod$coefficients
mod$fitted.values
mod0<-lm(mpg~wt, data=mtcars)
plot(mod0)
plot(mod0)[1]
?plot
q()
automatic<-subset(mtcars, am==0, select=mpg)
manual<-subset(mtcars, am==1, select=mpg)
t.test(manual, automatic, var.equal = TRUE)
t.test(manual, automatic, var.equal = TRUE)$int
t.test(manual, automatic, var.equal = TRUE)$confint
?t.test
t.test(manual, automatic, var.equal = TRUE)$conf.int
knitr::opts_chunk$set(echo = TRUE)
mod<-lm(mpg~factor(am), data=mtcars)
summary(mod)$coef
summary(mod)$coef[1]
summary(mod)$coef[3]
summary(mod)$coef[4]
mod$coefficients[4]
?mtcars
?ggplot
??ggplot
modWt<-lm(mpg~wt, data=mtcars)
summary(modWt)$coef
modWtAm<-lm(mpg~wt+factor(am), data=mtcars)
summary(modWtAm)$coef
library(ggplot2)
g<-ggplot(mtcars, aes(x=wt, y=mpg, color=factor(am)))
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+title('Miles per Gallon vs Weight')
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+main('Miles per Gallon vs Weight')
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+ggtitle('Miles per Gallon vs Weight')
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+ggtitle('Miles per Gallon vs Weight')+geom_line(modWt)
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+ggtitle('Miles per Gallon vs Weight')+geom_smooth(method="lm")
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+ggtitle('Miles per Gallon vs Weight')+geom_smooth(method="lm", formula=y~x)
?geom_abline
g+geom_point(size=3)+xlab('weight(1000lbs)')+ylab('Miles/(US) gallon')+ggtitle('Miles per Gallon vs Weight')+geom_abline(slope=modWt$coefficients[2], intercept=modWt$coefficients[1])
?stat_qq
?qqline
t.test(mtcars[mtcars$am==0, ]$wt, mtcars[mtcars$am==1, ]$wt)
t.test(mtcars[mtcars$am==0, ]$mpg, mtcars[mtcars$am==1, ]$mpg, var.equal=TRUE)
t.test(mtcars[mtcars$am==1, ]$mpg, mtcars[mtcars$am==0, ]$mpg , var.equal=TRUE)
?qt
qt(0.95, df=30)
qt(0.975, df=30)
qt(0.975, df=29)
t.test(mtcars[mtcars$am==1, ]$mpg, mtcars[mtcars$am==0, ]$mpg , var.equal=TRUE, alternative='greater')
view(mtcars)
View(mtcars)
pt(4.1061, 30)
qt(0.975)
qt(0.975, df=30)
fit<-lm(mpg~., data=mtcars)
summary(fit)$coef
fit<-lm(mpg~wt+cyl+drat, data=mtcars)
summary(fit)$coef
q()
q()
library(plotly)
install.packages("plotly")
library(plotly)
?datasets
library(help = "datasets")
?Orange
head(Orange)
plot_ly(Orange, x=age, y=circumference, color=factor(Tree))
fit<-lm(circumference~age, Orange)
plot_ly(fit)
plot_ly(data.frame(age=Orange$age, fit=fit$fitted.values), x=age, y=fit)
plot_ly(data.frame(age=Orange$age, fit=fit$fitted.values), x=a~ge, y=~fit)
plot_ly(data.frame(age=Orange$age, fit=fit$fitted.values), x=~age, y=~fit)
?plot_ly
?sapply
tapply
?tapply
tapply(Orange, factor(Orange$Tree), lm)
mapply
?mapply
fit1<-lm(circumference~age, Orange[Tree==1])
fit1<-lm(circumference~age, subset(Orange, Tree==1))
unique(Orange$Tree)
?for
{}
fitAll<-lm(circumference~age, Orange)
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
p
for (i in unique(Orange$Tree)){
Ory<-subset(Orange, Tree==i)
fit<-lm(circumference~age, subset(Orange, Tree==i))
trace<-predict(fit, Orange$age)
p<-p%>%add_trace(y = ~trace, mode = 'lines')
}
trace
for (i in unique(Orange$Tree)){
Ory<-subset(Orange, Tree==i)
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree<-predict(fit, Orange$age)
p<-p%>%add_trace(y = ~CircTree, mode = 'lines')
}
i=1
Ory<-subset(Orange, Tree==i)
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree<-predict(fit, Orange$age)
?predict
Orange$age
CircTree<-predict(fitAll, Orange$age)
CircTree<-predict(fitAll, newdata=Orange$age)
Orange$age
class(fitAll)
CircTree<-predict(fitAll, newdata=data.frame(Orange$age))
CircTree<-predict(fitAll, newdata=data.frame(age=Orange$age))
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree, mode = 'lines')
i
}
i
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree, name='Tree %i', mode = 'lines')
i
}
p
paste('Tree', i, sep=':')
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree, name=paste('Tree', i, sep=':'), mode = 'lines')
i
}
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[i]<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree[i], name=paste('Tree', i, sep=':'), mode = 'lines')
i
}
p
knitr::opts_chunk$set(echo = FALSE)
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[i]<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree[i], name=paste('Tree', i, sep=':'), mode = 'lines')
i
}
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
i
}
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
i
}
p
i=1
fit<-lm(circumference~age, subset(Orange, Tree==i))
predict(fit, data.frame(age=Orange$age))
i<-2
fit<-lm(circumference~age, subset(Orange, Tree==i))
predict(fit, data.frame(age=Orange$age))
CircTree
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
p
p<-p%>%add_trace(y = ~CircTree[[1]], name=paste('Tree', 1, sep=':'), mode = 'lines')
p
p<-p%>%add_trace(y = ~CircTree[[2]], name=paste('Tree', 2, sep=':'), mode = 'lines')
p
p<-p%>%add_trace(y = ~CircTree[[3]], name=paste('Tree', 3, sep=':'), mode = 'lines')
p<-p%>%add_trace(y = ~CircTree[[4]], name=paste('Tree', 4, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
i
}
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
p
}
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
p<-p%>%add_trace(y = ~CircTree[[1]], name=paste('Tree', 1, sep=':'), mode = 'lines')
p<-p%>%add_trace(y = ~CircTree[[2]], name=paste('Tree', 2, sep=':'), mode = 'lines')
p<-p%>%add_trace(y = ~CircTree[[3]], name=paste('Tree', 3, sep=':'), mode = 'lines')
p<-p%>%add_trace(y = ~CircTree[[4]], name=paste('Tree', 4, sep=':'), mode = 'lines')
p
p<-p%>%add_trace(y = ~CircTree[[5]], name=paste('Tree', 5, sep=':'), mode = 'lines')
p
for (i in seq(1:5))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:5))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
p
p
p
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:5))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
p
for (i in seq(1:5)) print(i)
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:3))
p<-p%>%add_trace(y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
p
p
?add_trace
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:5))
p<-add_trace(p,y = ~CircTree[[i]], name=paste('Tree', i, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:5))
p<-add_trace(p,y = ~(CircTree[[i]]), name=paste('Tree', i, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:5))
p<-add_trace(p,y = ~(CircTree[[i]]), name=paste('Tree', i, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
p<-add_trace(p,y = ~(CircTree[[1]]), name=paste('Tree', 1, sep=':'), mode = 'lines')
p<-add_trace(p,y = ~(CircTree[[2]]), name=paste('Tree', 2, sep=':'), mode = 'lines')
p<-add_trace(p,y = ~(CircTree[[3]]), name=paste('Tree', 3, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:5))
{ p<-add_trace(p,y = ~(CircTree[[i]]), name=paste('Tree', i, sep=':'), mode = 'lines')}
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
p<-add_trace(p,y = ~(CircTree[[1]]), name=paste('Tree', 1, sep=':'), mode = 'lines')
p
p<-plot_ly(data.frame(age=Orange$age, fit=fitAll$fitted.values), x=~age, y=~fit, type = "scatter" , mode = "lines" )
CircTree<-list()
for (i in unique(Orange$Tree)){
fit<-lm(circumference~age, subset(Orange, Tree==i))
CircTree[[i]]<-predict(fit, data.frame(age=Orange$age))
}
for (i in seq(1:2))
{ p<-add_trace(p,y = ~(CircTree[[i]]), name=paste('Tree', i, sep=':'), mode = 'lines')}
p
quit()
?Orange
?mutate
?mutate
fitAll<-lm(circumference~age, Orange)
library(dplyr)
df<-mutate(Orange, fit=fitAll$fitted.values, res=fitAll$residuals)
df<-data.frame(Orange, fit=fitAll$fitted.values, res=fitAll$residuals)
knitr::opts_chunk$set(echo = TRUE)
my_data<-read.csv("repdata_data_StormData.csv.bz2", header=TRUE)
size<-dim(my_data)
summary(EVTYPE)
summary(my_data$EVTYPE)
str(my_data$EVTYPE)
length(unique(my_data$EVTYPE))
library(gridExtra)
library(dplyr)
my_data_grouped_people<-group_by(my_data, EVTYPE)%>%
summarise(Fatalities=sum(FATALITIES), Injuries=sum(INJURIES), AvFatalities=mean(FATALITIES), AvInjuries=mean(INJURIES))
my_data_grouped_property<-group_by(my_data, EVTYPE)%>%
summarise(Damages=sum(PROPDMG), AvDamages=mean(PROPDMG))
top10_people<-head(arrange(my_data_grouped_people,desc(Fatalities), desc(Injuries)),10)
top10_people
top10_people_av<-head(arrange(my_data_grouped_people,desc(AvFatalities), desc(AvInjuries)),10)
top10_people_av
library(ggplot2)
library(gridExtra)
g<-ggplot(top10_people, aes(x=EVTYPE, y=Fatalities))+geom_bar(stat="identity", fill='#FF3300')+coord_flip()
g1<-ggplot(top10_people, aes(x=EVTYPE, y=Injuries))+geom_bar(stat="identity", fill='##FFBF00')+coord_flip()
grid.arrange(g, g1, nrow=2)
g1<-ggplot(top10_people, aes(x=EVTYPE, y=Injuries))+geom_bar(stat="identity", fill='orange')+coord_flip()
grid.arrange(g, g1, nrow=2)
g<-ggplot(top10_people, aes(x=EVTYPE, y=Fatalities))+geom_bar(stat="identity", fill='#FF3300')+coord_flip()
g1<-ggplot(top10_people, aes(x=EVTYPE, y=Injuries))+geom_bar(stat="identity", fill='orange')+coord_flip()
grid.arrange(g, g1, nrow=2)
g_av<-ggplot(top10_people_av, aes(x=EVTYPE, y=AvFatalities))+geom_bar(stat="identity", fill='olivedrab4')+coord_flip()
g1_av<-ggplot(top10_people_av, aes(x=EVTYPE, y=AvInjuries))+geom_bar(stat="identity", fill='olivedrab2')+coord_flip()
grid.arrange(g_av, g1_av, nrow=2)
top10_property<-head(arrange(my_data_grouped_property,desc(Damages)),10)
top10_property
top10_property_av<-head(arrange(my_data_grouped_property,desc(AvDamages)),10)
top10_property_av
g_prop<-ggplot(top10_property, aes(x=EVTYPE, y=Damages))+geom_bar(stat="identity", fill='#FF3300')+coord_flip()
g_prop_av<-ggplot(top10_property_av, aes(x=EVTYPE, y=AvDamages))+geom_bar(stat="identity", fill='#FF3300')+coord_flip()
grid.arrange(g_prop_av, g_prop, nrow=2)
class(my_data$PROPDMG)
class(my_data$PROPDMGEXP)
summary(my_data$PROPDMGEXP)
head(my_data)
filtered<-filter(my_data,PROPDMGEXP in 1:8)
filtered<-filter(my_data,PROPDMGEXP %in% 1:8)
head(select(filtered, EVTYPE, PROPDMG,PROPDMGEXP)
)
dim(filtered)
head(my_data)
knitr::opts_chunk$set(echo = TRUE)
my_data<-read.csv("repdata_data_StormData.csv.bz2", header=TRUE)
head(my_data)
summary(my_data$PROPDMGEXP)
filter(my_data, PROPDMGEXP==H)
library(dplyr)
filter(my_data, PROPDMGEXP==H)
filter(my_data, PROPDMGEXP=='H')
names(my_data)
select(filter(my_data, PROPDMGEXP=='H'), REMARKS=
fzibk
ilumjöo
select(filter(my_data, PROPDMGEXP=='H'), REMARKS)
my_data$PROPDMGEXP<-replace(my_data$PROPDMGEXP, c("", "H", "h","K", "m", "M", "B"), c(0,2,2,3,6,6,9))
s
summary(my_data$PROPDMGEXP)
my_data<-filter(my_data, PROPDMGEXP %not in% c("?", "-", "+"))
my_data<-filter(my_data, !(PROPDMGEXP %in% c("?", "-", "+")))
summary(my_data$PROPDMGEXP)
my_data$PROPDMGEXP<-replace(my_data$PROPDMGEXP, c("", "H", "h","K", "m", "M", "B"), c(0,2,2,3,6,6,9))
?replace
x<-c(0, "", "H", 1, 3, "B");
replace(x, c("", "H", "B"), c(0,2,9))
x
replace(x, c("", "H", "B"), c(0,2,9))
library(car)
?recode
recode(x, ""=0, "H"=2, "B"=9)
recode(x, "H"=2, "B"=9)
x
?recode
recode(x, "''=0; 'H'=2; 'B'=9")
detach("package:car", unload=TRUE)
recode(x, "H"=2, "B"=9)
10^4
my_data$PROPDMGEXP<-as.numeric(recode(my_data$PROPDMGEXP, "''=0; 'H'=2; 'h'=2;'K'=3;'m'=6; 'M'=6; 'B'=9"))
library(car)
my_data$PROPDMGEXP<-as.numeric(recode(my_data$PROPDMGEXP, "''=0; 'H'=2; 'h'=2;'K'=3;'m'=6; 'M'=6; 'B'=9"))
head(my_data$PROPDMGEXP)
x<-as.factor(c(1,2,3))
x
as.numeric(x)
x<-as.factor(c(1,2,3,1,3))
as.numeric(x)
summary(my_data$PROPDMGEXP)
head(my_data)
summary(my_dara$CROPDMG)
summary(my_data$CROPDMG)
summary(my_data$CROPDMGEXP)
my_data<-read.csv("repdata_data_StormData.csv.bz2", header=TRUE)
my_data<-filter(my_data, !(PROPDMGEXP %in% c("?", "-", "+")))
head(my_data$PROPDMGEXP)
summary(my_data$PROPDMGEXP)
x<-recode(my_data$PROPDMGEXP, "''=0; 'H'=2; 'h'=2;'K'=3;'m'=6; 'M'=6; 'B'=9")
head(x)
summary(x)
x<-as.numeric(x)
summary(x)
head(x)
x<-recode(my_data$PROPDMGEXP, "''=0; 'H'=2; 'h'=2;'K'=3;'m'=6; 'M'=6; 'B'=9")
x<-as.numeric(levels(x))[x]
head(x)
my_data$PROPDMGEXP<-recode(my_data$PROPDMGEXP, "''=0; 'H'=2; 'h'=2;'K'=3;'m'=6; 'M'=6; 'B'=9")
my_data$PROPDMGEXP<-as.numeric(levels(my_data$PROPDMGEXP))[my_data$PROPDMGEXP]
head(my_data$PROPDMGEXP)
summary(my_data$CROPDMGEXP)
my_data<-read.csv("repdata_data_StormData.csv.bz2", header=TRUE)
my_data<-read.csv("repdata_data_StormData.csv.bz2", header=TRUE)
summary(my_data$CROPDMGEXP)
q()
install.packages("shiny")
library(shiny)
library("shiny")
library(shiny)
?rtools
??rtools
install.packages("rtools")
install.packages("Rtools")
q()
q()
getwd()
setwd("C:/Users/Francy/Documents/Coursera/DevelopingDataProducts/shiny/MyApp2")
runApp()
library(shiny)
runApp()
?textOutput
runApp()
runApp()
runApp()
runApp()
head(Orange)
runApp()
head(Orange)
runApp()
?theme
summary(Orange$Tree)
runApp()
runApp()
?geom_line
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nrow(Orange)
runApp()
runApp()
runApp()
runApp()
q()
